library(ggplot2)
library(ggplot2)
library(ggplot2)
fig(12,8)
fig(12,8)
library(tidyverse) # metapackage of all tidyverse packages
library(ggplot2)
library(dplyr)
library(reshape2) # Melt
library(plyr)
library(scales) # visualisation
library(corrplot) # visualisation
library(GGally) # visualisation
library(ggthemes) # visualisation
library(ggalt) # encircle
library(maps) #maps
library(treemap)
library(ggdendro) # Dendogram
# Interactivity
library(crosstalk)
library(plotly)
#Date
library(scales)
library(zoo)
library(lubridate)
fig<-function(x,y){
options(repr.plot.width = x, repr.plot.height = y)
}
fig(12,8)
ggplot(titanic, aes(x=Age, y=Fare)) +
geom_point(aes(color=Sex)) +
labs(y="Fare",
x="Age",
title="Titanic - Age vs Fare against Gender ")+
theme_gray()+ # Default theme
theme(plot.title = element_text(size=22),axis.text.x= element_text(size=15),
axis.text.y= element_text(size=15), axis.title=element_text(size=18))
library(tidyverse)
View(gapminder)
gapminder
library(grapminder)
library(gapminder)
library("gapminder")
install.packages("gapminder")
View(gapminder)
library(gapminder)
View(gapminder)
gapminder %>%
filter(continent %in% c("Africa", "Europe"))
filter(continent %in% c("Africa", "Europe"))+
View(gapminder)
library(tidyverse)
View(gapminder)
gapminder %>%
filter(continent %in% c("Africa","Europe")) %>%
filter(gdpPercap < 30000) %>%
ggplot(aes(x=gdpPercap,))
gapminder %>%
filter(continent %in% c("Africa","Europe")) %>%
filter(gdpPercap < 30000) %>%
ggplot(aes(x=gdpPercap,))
gapminder %>%
gapminder %>%
filter(continent %in% c("Africa","Europe")) %>%
filter(gdpPercap < 30000) %>%
ggplot(aes(x=gdpPercap,
y=lifeExp,
size=pop,
color=year))+
geom_point()+
facet_wrap(~continent)+
labs(title = "Life expectancy explained byGDP",
x="GDP per capita",
y="Life expectancy")
gapminder %>%
+ filter(continent %in% c("Africa","Europe")) %>%
+ filter(gdpPercap < 30000) %>%
+ ggplot(aes(x=gdpPercap,
+            y=lifeExp,
+            size=pop,
+            color=year))+
+     geom_point()+
+     facet_wrap(~continent)+
+     labs(title = "Life expectancy explained byGDP",
+          x="GDP per capita",
+          y="Life expectancy")
View(fig)
View(fig)
View(fig)
View(fig)
View(fig)
setwd("M:/Documents/_phd/_data_analysis_and_documentation/Paper4_Oxygen_scale-down/GitHub_repo/data_processing/expression_data/R")
library("DESeq2")
library(dplyr)
library(EnhancedVolcano)
metadata<-read.csv(file = "../../../data/processed_RNA-seq_data/metadata.tsv", sep= "\t", row.names = 1,check.names = FALSE)
countdata<-read.csv(file = "../../../data/processed_RNA-seq_data/FeatureCounts.tsv", sep= "\t", row.names = 1,check.names = FALSE)
View(metadata)
dds <- DESeqDataSetFromMatrix(countData = countdata,
colData = metadata,
design= ~ oscillation)
dds <- DESeq(dds)
res <- results(dds, contrast=c("oscillation","S+O","none"))
write.csv(res,"DESeq_res_O2_sd_SO_osc_vs_Control.csv")
EnhancedVolcano(res,
lab = rownames(res),
x = 'log2FoldChange',
y = 'padj',
pCutoff = 10e-5,
FCcutoff = 1.0
)
# O_osc_vs_Control
res <- results(dds, contrast=c("oscillation","O","none"))
write.csv(res,"DESeq_res_O2_sd_O_osc_vs_Control.csv")
EnhancedVolcano(res,
lab = rownames(res),
x = 'log2FoldChange',
y = 'padj',
pCutoff = 10e-5,
FCcutoff = 1.0
)
# S_osc_vs_Control
res <- results(dds, contrast=c("oscillation","S","none"))
write.csv(res,"DESeq_res_O2_sd_S_osc_vs_Control.csv")
EnhancedVolcano(res,
lab = rownames(res),
x = 'log2FoldChange',
y = 'padj',
pCutoff = 10e-5,
FCcutoff = 1.0
)
### Do only with new metadata
dds <- DESeqDataSetFromMatrix(countData = countdata,
colData = metadata,
design= ~ condition)
dds <- DESeq(dds)
# S_famine_vs_Control
res <- results(dds, contrast=c("condition","batch_S_oscillation_famine","WT_fed-batch_control"))
### Do only with new metadata
dds <- DESeqDataSetFromMatrix(countData = countdata,
colData = metadata,
design= ~ condition)
dds <- DESeq(dds)
# S_famine_vs_Control
res <- results(dds, contrast=c("condition","WT_fed-batch_S_oscillation_famine","WT_fed-batch_control"))
write.csv(res,"DESeq_res_O2_sd_S_famine_vs_Control.csv")
EnhancedVolcano(res,
lab = rownames(res),
x = 'log2FoldChange',
y = 'padj',
pCutoff = 10e-5,
FCcutoff = 1.0
)
# S_feast_vs_Control
res <- results(dds, contrast=c("condition","WT_fed-batch_S_oscillation_feast","WT_fed-batch_control"))
write.csv(res,"DESeq_res_O2_sd_S_feast_vs_Control.csv")
EnhancedVolcano(res,
lab = rownames(res),
x = 'log2FoldChange',
y = 'padj',
pCutoff = 10e-5,
FCcutoff = 1.0
)
# S_osc_famine_vs_feast
res <- results(dds, contrast=c("condition","WT_fed-batch_S_oscillation_famine","WT_fed-batch_S_oscillation_feast"))
write.csv(res,"DESeq_res_O2_sd_S_osc_famine_vs_feast.csv")
EnhancedVolcano(res,
lab = rownames(res),
x = 'log2FoldChange',
y = 'padj',
pCutoff = 10e-5,
FCcutoff = 1.0
)
library("DESeq2")
library(dplyr)
library(EnhancedVolcano)
metadata<-read.csv(file = "../../../data/processed_RNA-seq_data/metadata.tsv", sep= "\t", row.names = 1,check.names = FALSE)
countdata<-read.csv(file = "../../../data/processed_RNA-seq_data/FeatureCounts.tsv", sep= "\t", row.names = 1,check.names = FALSE)
dds <- DESeqDataSetFromMatrix(countData = countdata,
colData = metadata,
design= ~ oscillation)
dds <- DESeq(dds)
# SO_osc_vs_Control
res <- results(dds, contrast=c("oscillation","S+O","none"))
write.csv(res,"../../../data/processed_RNA-seq_data/DESeq_res_O2_sd_SO_osc_vs_Control.csv")
EnhancedVolcano(res,
lab = rownames(res),
x = 'log2FoldChange',
y = 'padj',
pCutoff = 10e-5,
FCcutoff = 1.0
)
# O_osc_vs_Control
res <- results(dds, contrast=c("oscillation","O","none"))
write.csv(res,"../../../data/processed_RNA-seq_data/DESeq_res_O2_sd_O_osc_vs_Control.csv")
EnhancedVolcano(res,
lab = rownames(res),
x = 'log2FoldChange',
y = 'padj',
pCutoff = 10e-5,
FCcutoff = 1.0
)
# S_osc_vs_Control
res <- results(dds, contrast=c("oscillation","S","none"))
write.csv(res,"../../../data/processed_RNA-seq_data/DESeq_res_O2_sd_S_osc_vs_Control.csv")
EnhancedVolcano(res,
lab = rownames(res),
x = 'log2FoldChange',
y = 'padj',
pCutoff = 10e-5,
FCcutoff = 1.0
)
### Do only with new metadata
dds <- DESeqDataSetFromMatrix(countData = countdata,
colData = metadata,
design= ~ condition)
dds <- DESeq(dds)
# S_famine_vs_Control
res <- results(dds, contrast=c("condition","WT_fed-batch_S_oscillation_famine","WT_fed-batch_control"))
write.csv(res,"../../../data/processed_RNA-seq_data/DESeq_res_O2_sd_S_famine_vs_Control.csv")
EnhancedVolcano(res,
lab = rownames(res),
x = 'log2FoldChange',
y = 'padj',
pCutoff = 10e-5,
FCcutoff = 1.0
)
# S_feast_vs_Control
res <- results(dds, contrast=c("condition","WT_fed-batch_S_oscillation_feast","WT_fed-batch_control"))
write.csv(res,"../../../data/processed_RNA-seq_data/DESeq_res_O2_sd_S_feast_vs_Control.csv")
EnhancedVolcano(res,
lab = rownames(res),
x = 'log2FoldChange',
y = 'padj',
pCutoff = 10e-5,
FCcutoff = 1.0
)
# S_osc_famine_vs_feast
res <- results(dds, contrast=c("condition","WT_fed-batch_S_oscillation_famine","WT_fed-batch_S_oscillation_feast"))
write.csv(res,"../../../data/processed_RNA-seq_data/DESeq_res_O2_sd_S_osc_famine_vs_feast.csv")
EnhancedVolcano(res,
lab = rownames(res),
x = 'log2FoldChange',
y = 'padj',
pCutoff = 10e-5,
FCcutoff = 1.0
)
library(PCAtools)
library(dplyr)
# PCA of A matrix
logtpmData<-read.csv(file="../../../data/processed_RNA-seq_data/log_tpm.csv",row.names = 1, check.names = FALSE)
MetaData<-read.csv(file = "../../../data/processed_RNA-seq_data/metadata.tsv", row.names = 1, sep = "\t", check.names = FALSE)
logtpmData<- logtpmData %>%mutate_all(as.numeric)
logtpmData <- t(scale(t(logtpmData)))
p <- pca(logtpmData,metadata = MetaData, removeVar = 0.1)
biplot(p,
x = 'PC1',
y = 'PC4',
ntopLoadings = 5,fillBoxedLoadings = "white",widthLoadingsArrows = 1.0,drawConnectorsLoadings = TRUE,
sizeLoadingsNames = 5.0,
borderWidth = 1.0,gridlines.minor = FALSE,gridlines.major = FALSE,vlineWidth = 1,hlineWidth = 1,
colby = "Condition",
shape = "Sample_ID",
colLegendTitle = "Oscillation",
shapeLegendTitle = "Timepoint",
hline = 0,
vline = 0,
legendPosition = "right",borderColour = "black",
lab = NULL,
showLoadings = TRUE)
View(MetaData)
library(PCAtools)
library(dplyr)
# PCA of A matrix
logtpmData<-read.csv(file="../../../data/processed_RNA-seq_data/log_tpm.csv",row.names = 1, check.names = FALSE)
MetaData<-read.csv(file = "../../../data/processed_RNA-seq_data/metadata.tsv", row.names = 1, sep = "\t", check.names = FALSE)
logtpmData<- logtpmData %>%mutate_all(as.numeric)
logtpmData <- t(scale(t(logtpmData)))
p <- pca(logtpmData,metadata = MetaData, removeVar = 0.1)
biplot(p,
x = 'PC1',
y = 'PC4',
ntopLoadings = 5,fillBoxedLoadings = "white",widthLoadingsArrows = 1.0,drawConnectorsLoadings = TRUE,
sizeLoadingsNames = 5.0,
borderWidth = 1.0,gridlines.minor = FALSE,gridlines.major = FALSE,vlineWidth = 1,hlineWidth = 1,
colby = "oscillation",
shape = "sample_ID",
colLegendTitle = "Oscillation",
shapeLegendTitle = "Timepoint",
hline = 0,
vline = 0,
legendPosition = "right",borderColour = "black",
lab = NULL,
showLoadings = TRUE)
pairsplot(p,components = c("PC1","PC2","PC3","PC4"))
write.csv(p["loadings"],"../../../data/processed_RNA-seq_data/log_tpm_PCA_loadings.csv")
write.csv(p["rotated"],"../../../data/processed_RNA-seq_data/log_tpm_PCA_rotated.csv")
write.csv(p["metadata"],"../../../data/processed_RNA-seq_data/log_tpm_PCA_metadata.csv")
write.csv(p["variance"],"../../../data/processed_RNA-seq_data/tpm_PCA_variances.csv")
screeplot(p)
elobow
library(PCAtools)
library(dplyr)
# PCA of A matrix
logtpmData<-read.csv(file="../../../data/processed_RNA-seq_data/log_tpm.csv",row.names = 1, check.names = FALSE)
MetaData<-read.csv(file = "../../../data/processed_RNA-seq_data/metadata.tsv", row.names = 1, sep = "\t", check.names = FALSE)
logtpmData<- logtpmData %>%mutate_all(as.numeric)
logtpmData <- t(scale(t(logtpmData)))
p <- pca(logtpmData,metadata = MetaData, removeVar = 0.1)
biplot(p,
x = 'PC1',
y = 'PC4',
ntopLoadings = 5,fillBoxedLoadings = "white",widthLoadingsArrows = 1.0,drawConnectorsLoadings = TRUE,
sizeLoadingsNames = 5.0,
borderWidth = 1.0,gridlines.minor = FALSE,gridlines.major = FALSE,vlineWidth = 1,hlineWidth = 1,
colby = "oscillation",
shape = "sample_ID",
colLegendTitle = "Oscillation",
shapeLegendTitle = "Timepoint",
hline = 0,
vline = 0,
legendPosition = "right",borderColour = "black",
lab = NULL,
showLoadings = TRUE)
pairsplot(p,components = c("PC1","PC2","PC3","PC4"))
write.csv(p["loadings"],"../../../data/processed_RNA-seq_data/log_tpm_PCA_loadings.csv")
write.csv(p["rotated"],"../../../data/processed_RNA-seq_data/log_tpm_PCA_rotated.csv")
write.csv(p["metadata"],"../../../data/processed_RNA-seq_data/log_tpm_PCA_metadata.csv")
write.csv(p["variance"],"../../../data/processed_RNA-seq_data/tpm_PCA_variances.csv")
screeplot(p)
plotloadings(p,components = getComponents(p, c(1)), labSize = 3, rangeRetain = 0.001)
screeplot(p, components = getComponents(5),hline = 95, vline = 5, axisLabSize = 14, titleLabSize = 20,returnPlot = TRUE)
library(PCAtools)
library(dplyr)
# PCA of A matrix
logtpmData<-read.csv(file="../../../data/processed_RNA-seq_data/log_tpm.csv",row.names = 1, check.names = FALSE)
MetaData<-read.csv(file = "../../../data/processed_RNA-seq_data/metadata.tsv", row.names = 1, sep = "\t", check.names = FALSE)
logtpmData<- logtpmData %>%mutate_all(as.numeric)
logtpmData <- t(scale(t(logtpmData)))
p <- pca(logtpmData,metadata = MetaData, removeVar = 0.1)
biplot(p,
x = 'PC1',
y = 'PC4',
ntopLoadings = 5,fillBoxedLoadings = "white",widthLoadingsArrows = 1.0,drawConnectorsLoadings = TRUE,
sizeLoadingsNames = 5.0,
borderWidth = 1.0,gridlines.minor = FALSE,gridlines.major = FALSE,vlineWidth = 1,hlineWidth = 1,
colby = "oscillation",
shape = "sample_ID",
colLegendTitle = "Oscillation",
shapeLegendTitle = "Timepoint",
hline = 0,
vline = 0,
legendPosition = "right",borderColour = "black",
lab = NULL,
showLoadings = TRUE)
pairsplot(p,components = c("PC1","PC2","PC3","PC4"))
write.csv(p["loadings"],"../../../data/processed_RNA-seq_data/log_tpm_PCA_loadings.csv")
write.csv(p["rotated"],"../../../data/processed_RNA-seq_data/log_tpm_PCA_rotated.csv")
write.csv(p["metadata"],"../../../data/processed_RNA-seq_data/log_tpm_PCA_metadata.csv")
write.csv(p["variance"],"../../../data/processed_RNA-seq_data/tpm_PCA_variances.csv")
screeplot(p)
